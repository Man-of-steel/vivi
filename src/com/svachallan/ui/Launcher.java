/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package com.svachallan.ui;

import dao.Constants;
import gnu.io.CommPortIdentifier;
import gnu.io.SerialPort;
import gnu.io.CommPort;
import java.awt.Dimension;
import java.awt.Font;
import java.awt.Toolkit;
import java.io.File;
import java.io.InputStreamReader;
import java.io.OutputStreamWriter;
import javax.swing.JOptionPane;
import javax.swing.UIManager;

/**
 *
 * @author Man of Steel
 */
public class Launcher extends javax.swing.JFrame {

    /**
     * Creates new form Launcher
     */
    InputStreamReader inputStreamReader;
    OutputStreamWriter outputStreamWriter;
    SerialPort serialPort = null;

    private boolean streamEstablished = false;
    private boolean essentialsChecked = false;

    public Launcher() {

        initComponents();
        Dimension dimension = Toolkit.getDefaultToolkit().getScreenSize();
        int x = (int) ((dimension.getWidth() - this.getWidth()) / 2);
        int y = (int) ((dimension.getHeight() - this.getHeight()) / 2);
        this.setLocation(x, y);
        // streamEstablished = establishDataStream();
        // essentialsChecked = checkEssentials();
    }

    public boolean isStreamEstablished() {
        return streamEstablished;
    }

    public boolean isEssentialsChecked() {
        return essentialsChecked;
    }

    private boolean establishDataStream() {
        try {
            System.out.println("inside method try");

            CommPortIdentifier portIdentifier = null;

            portIdentifier = CommPortIdentifier.getPortIdentifier(Constants.STREAM_FILE_WITH_PATH);
        

            if (portIdentifier.isCurrentlyOwned()) {
                System.out.println("Error: Port is currently in use");
            } else {
                CommPort commPort = portIdentifier.open(this.getClass().getName(), 2000);
                if (commPort instanceof SerialPort) {
                    serialPort = (SerialPort) commPort;
                    serialPort.setSerialPortParams(9600, SerialPort.DATABITS_8, SerialPort.STOPBITS_1, SerialPort.PARITY_NONE);
                    outputStreamWriter = new OutputStreamWriter(serialPort.getOutputStream());
                    inputStreamReader = new InputStreamReader(serialPort.getInputStream());
                    System.out.println("Port created successfully with hardware to communicate");
                    streamEstablished = true;
                    return true;

                }
            }
        } catch (Exception e) {
            System.out.println("Inside method catch");
            System.out.println(e);
            JOptionPane.showMessageDialog(null, "Cannot establish data stream! Check hardware port! " + e);
            System.exit(-1);
        }

        return false;
    }

    private boolean checkEssentials() {
        File reportsFolderRMPU = new File(Constants.PRINT_FOLDER_RMPU);
        File reportsFolderAlternator = new File(Constants.PRINT_FOLDER_ALTERNATOR);
        
        if(!reportsFolderRMPU.exists()){
            reportsFolderRMPU.mkdir();
        }
        
        if(!reportsFolderAlternator.exists()){
            reportsFolderAlternator.mkdir();
        }
        
        essentialsChecked = true;
        return true;
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        main_theme_label = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setName("main_frame"); // NOI18N
        setUndecorated(true);
        setType(java.awt.Window.Type.POPUP);

        main_theme_label.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/theme.jpg"))); // NOI18N

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(main_theme_label)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(main_theme_label, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Launcher.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Launcher.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Launcher.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Launcher.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        Thread.setDefaultUncaughtExceptionHandler((Thread t, Throwable e) -> {
            JOptionPane.showMessageDialog(null, "Cannot establish connection, Check Hardware Port and try again. The application will exit now!\n Error -> " + e);
            System.exit(-1);
        });
        
        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                Launcher launcher = new Launcher();
                launcher.setVisible(true);
                
                try {
                    
                    UIManager.put("OptionPane.messageFont", new Font("Arial", Font.BOLD, 20));
                    UIManager.put("OptionPane.buttonFont", new Font("Arial", Font.PLAIN, 20));

                    launcher.checkEssentials();
                    launcher.establishDataStream();

                    Thread.sleep(5000);
                
                    if (launcher.isStreamEstablished() && launcher.isEssentialsChecked()) {
                        
                        View_Control view = new View_Control();
                        view.setInputStreamReader(launcher.inputStreamReader);
                        view.setOutputStreamWriter(launcher.outputStreamWriter);
                        view.setupAndStartAllThreads();
                        launcher.setVisible(false);
                        System.out.println("Moving to view control");
                        view.setVisible(true);
                        
                    }
                    
                } catch (Exception exception) {
                    JOptionPane.showMessageDialog(null, "Cannot establish connection, Check Hardware Port and try again. The application will exit now!" + exception);
                    launcher.setVisible(false);
                    System.exit(-1);
                }
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel main_theme_label;
    // End of variables declaration//GEN-END:variables
}
